"use strict";(self.webpackChunkcheckup_website=self.webpackChunkcheckup_website||[]).push([[574],{3905:function(t,e,a){a.d(e,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function s(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function r(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?s(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,i=function(t,e){if(null==t)return{};var a,n,i={},s=Object.keys(t);for(n=0;n<s.length;n++)a=s[n],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(n=0;n<s.length;n++)a=s[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var l=n.createContext({}),d=function(t){var e=n.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):r(r({},e),t)),a},c=function(t){var e=d(t.components);return n.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var a=t.components,i=t.mdxType,s=t.originalType,l=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),p=d(a),m=i,k=p["".concat(l,".").concat(m)]||p[m]||u[m]||s;return a?n.createElement(k,r(r({ref:e},c),{},{components:a})):n.createElement(k,r({ref:e},c))}));function m(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var s=a.length,r=new Array(s);r[0]=p;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:i,r[1]=o;for(var d=2;d<s;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9358:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return g}});var n=a(3117),i=a(102),s=(a(7294),a(3905)),r=["components"],o={id:"writing-validation-tasks",title:"Writing a Validation Task"},l=void 0,d={unversionedId:"guides/writing-validation-tasks",id:"guides/writing-validation-tasks",isDocsHomePage:!1,title:"Writing a Validation Task",description:"Writing a Validation Task",source:"@site/docs/guides/writing-validation-tasks.mdx",sourceDirName:"guides",slug:"/guides/writing-validation-tasks",permalink:"/docs/guides/writing-validation-tasks",editUrl:"https://github.com/checkupjs/checkup/edit/master/website/docs/guides/writing-validation-tasks.mdx",tags:[],version:"current",frontMatter:{id:"writing-validation-tasks",title:"Writing a Validation Task"},sidebar:"guidesSidebar",previous:{title:"Writing a Migration Task",permalink:"/docs/guides/writing-migration-tasks"},next:{title:"Triggering Actions",permalink:"/docs/guides/actions"}},c=[{value:"Writing a Validation Task",id:"writing-a-validation-task",children:[],level:2},{value:"A simple migration task",id:"a-simple-migration-task",children:[],level:2}],u=function(t){return function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}},p=u("Tabs"),m=u("TabItem"),k={toc:c};function g(t){var e=t.components,a=(0,i.Z)(t,r);return(0,s.kt)("wrapper",(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"writing-a-validation-task"},"Writing a Validation Task"),(0,s.kt)("p",null,"Similar to migration tasks, validation tasks are a specialized type of task that are use to ensure your project conforms to a set of requirements."),(0,s.kt)("p",null,"Some examples of validation tasks include"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"ensuring your project has a group of related dependencies that match a minimum verison set"),(0,s.kt)("li",{parentName:"ul"},"validating whether your project is a valid ESM package"),(0,s.kt)("li",{parentName:"ul"},"ensuring that your project contains a valid set of configuration and packages for accessibility testing"),(0,s.kt)("li",{parentName:"ul"},"many more...")),(0,s.kt)("p",null,"Validation tasks are a subclass of the ",(0,s.kt)("a",{parentName:"p",href:"docs/api/@checkup/core/BaseTask"},"BaseTask")," class, and have migration-specific methods and properties that make writing them easier. More details on what's included in this class can be found in the ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/@checkup/core/BaseValidationTask"},"BaseValidationTask")," documentation."),(0,s.kt)("h2",{id:"a-simple-migration-task"},"A simple migration task"),(0,s.kt)("p",null,"Below is a simple example of a validation task."),(0,s.kt)(p,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(m,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/tasks/my-validation-task.ts"',title:'"/tasks/my-validation-task.ts"'},"import { BaseValidationTask, Task, TaskContext } from '@checkup/core';\nimport { Result } from 'sarif';\n\nexport default class MyValidationTask\n  extends BaseValidationTask\n  implements Task\n{\n  taskName = 'my-validation';\n  taskDisplayName = 'My Validation';\n  description = 'Validates a package';\n  category = 'validation';\n\n  constructor(pluginName: string, context: TaskContext) {\n    super('My Validation', pluginName, context);\n\n    this.addRuleComponentMetadata();\n\n    this.addValidationStep('First step is valid', () => {\n      return {\n        isValid: validateFirstStep(),\n      };\n    });\n\n    this.addValidationStep('Second step is valid', () => {\n      return {\n        isValid: validateSecondStep(),\n      };\n    });\n  }\n\n  async run(): Promise<Result[]> {\n    let validationResults = await this.validate();\n\n    // iterating the validation results and explicitly adding to the SARIF log\n    // will allow consumers to add additional properties to the results\n    for (let [messageText, validationResult] of validationResults) {\n      this.addValidationResult(messageText, validationResult.isValid);\n    }\n\n    return this.results;\n  }\n}\n"))),(0,s.kt)(m,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/tasks/my-migration-task.js"',title:'"/tasks/my-migration-task.js"'},"const { BaseValidationTask, Task, TaskContext } = require('@checkup/core');\n\nmodule.exports = class MyValidationTask extends BaseValidationTask {\n  taskName = 'my-validation';\n  taskDisplayName = 'My Validation';\n  description = 'Validates a package';\n  category = 'validation';\n\n  constructor(pluginName, context) {\n    super('My Validation', pluginName, context);\n\n    this.addRuleComponentMetadata();\n\n    this.addValidationStep('First step is valid', () => {\n      return {\n        isValid: validateFirstStep(),\n      };\n    });\n\n    this.addValidationStep('Second step is valid', () => {\n      return {\n        isValid: validateSecondStep(),\n      };\n    });\n  }\n\n  async run() {\n    let validationResults = await this.validate();\n\n    // iterating the validation results and explicitly adding to the SARIF log\n    // will allow consumers to add additional properties to the results\n    for (let [messageText, validationResult] of validationResults) {\n      this.addValidationResult(messageText, validationResult.isValid);\n    }\n\n    return this.results;\n  }\n};\n")))),(0,s.kt)("p",null,"Coupling this with the pretty formatter, we can get a full picture of the scope of our validation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"checkup run . --task my-validation --format pretty\n\nCheckup report generated for checkup-app v1.3.0 (46 files analyzed)\n\nThis project is 100 days old, with 90 days active days, 375 commits and 46 files.\n\nCheckup ran the following task(s) successfully:\n\nMy Validation\n=================\nValidation passed\n  \u2714 First step is valid\n  \u2714 Second step is valid\n")))}g.isMDXComponent=!0}}]);