"use strict";(self.webpackChunkcheckup_website=self.webpackChunkcheckup_website||[]).push([[710],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var k=r.createContext({}),p=function(e){var t=r.useContext(k),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(k.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,k=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=p(n),d=a,m=s["".concat(k,".").concat(d)]||s[d]||o[d]||l;return n?r.createElement(m,u(u({ref:t},c),{},{components:n})):r.createElement(m,u({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,u=new Array(l);u[0]=s;var i={};for(var k in t)hasOwnProperty.call(t,k)&&(i[k]=t[k]);i.originalType=e,i.mdxType="string"==typeof e?e:a,u[1]=i;for(var p=2;p<l;p++)u[p]=n[p];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},9338:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return k},metadata:function(){return p},toc:function(){return c},default:function(){return s}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),u=["components"],i={id:"checkup-task-runner",title:"checkup-task-runner"},k=void 0,p={unversionedId:"api/cli/checkup-task-runner",id:"api/cli/checkup-task-runner",isDocsHomePage:!1,title:"checkup-task-runner",description:"CheckupTaskRunner",source:"@site/docs/api/cli/checkup-task-runner.md",sourceDirName:"api/cli",slug:"/api/cli/checkup-task-runner",permalink:"/docs/api/cli/checkup-task-runner",editUrl:"https://github.com/checkupjs/checkup/edit/master/website/docs/api/cli/checkup-task-runner.md",tags:[],version:"current",frontMatter:{id:"checkup-task-runner",title:"checkup-task-runner"},sidebar:"apiSidebar",previous:{title:"get-formatter",permalink:"/docs/api/cli/get-formatter"}},c=[{value:"CheckupTaskRunner",id:"checkuptaskrunner",children:[{value:"new CheckupTaskRunner(options)",id:"new-checkuptaskrunneroptions",children:[]},{value:"checkupTaskRunner.taskErrorKind \u21d2 <code>ErrorKind</code>",id:"checkuptaskrunnertaskerrorkind-\u21d2-errorkind",children:[]},{value:"checkupTaskRunner.hasTaskFilter \u21d2 <code>boolean</code>",id:"checkuptaskrunnerhastaskfilter-\u21d2-boolean",children:[]},{value:"checkupTaskRunner.getAvailableTasks() \u21d2",id:"checkuptaskrunnergetavailabletasks-\u21d2",children:[]}]}],o={toc:c};function s(e){var t=e.components,n=(0,a.Z)(e,u);return(0,l.kt)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("a",{name:"CheckupTaskRunner"}),(0,l.kt)("h2",{id:"checkuptaskrunner"},"CheckupTaskRunner"),(0,l.kt)("p",null,"Class that is able to run a list of checkup tasks."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": global class  "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#CheckupTaskRunner"},"CheckupTaskRunner"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#new_CheckupTaskRunner_new"},"new CheckupTaskRunner(options)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#CheckupTaskRunner+taskErrorKind"},".taskErrorKind")," \u21d2 ",(0,l.kt)("code",null,"ErrorKind")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#CheckupTaskRunner+hasTaskFilter"},".hasTaskFilter")," \u21d2 ",(0,l.kt)("code",null,"boolean")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#CheckupTaskRunner+getAvailableTasks"},".getAvailableTasks()")," \u21d2")))),(0,l.kt)("a",{name:"new_CheckupTaskRunner_new"}),(0,l.kt)("h3",{id:"new-checkuptaskrunneroptions"},"new CheckupTaskRunner(options)"),(0,l.kt)("p",null,"Create a CheckupTaskRunner."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Param"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"RunOptions")),(0,l.kt)("td",{parentName:"tr",align:null},"run options that may specify the following items:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.cwd"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The path referring to the root directory that Checkup will run in")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.config?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"CheckupConfig")),(0,l.kt)("td",{parentName:"tr",align:null},"Use this configuration, overriding .checkuprc if present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.configPath?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Use the configuration found at this path, overriding .checkuprc if present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.categories?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Array.","<","string",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Runs specific tasks specified by category. Can be used multiple times.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.excludePaths?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Array.","<","string",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Paths to exclude from checkup. If paths are provided via command line and via checkup config, command line paths will be used.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.groups?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Array.","<","string",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Runs specific tasks specified by group. Can be used multiple times.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.listTasks?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"If true, list all available tasks to run.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.tasks?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Array.","<","string",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Runs specific tasks specified by the fully qualified task name in the format pluginName/taskName. Can be used multiple times.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.pluginBaseDir?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The base directory where Checkup will load the plugins from. Defaults to cwd.")))),(0,l.kt)("a",{name:"CheckupTaskRunner+taskErrorKind"}),(0,l.kt)("h3",{id:"checkuptaskrunnertaskerrorkind-\u21d2-errorkind"},"checkupTaskRunner.taskErrorKind \u21d2 ",(0,l.kt)("code",null,"ErrorKind")),(0,l.kt)("p",null,"Get the task's error kind"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.kt)("a",{parentName:"p",href:"#CheckupTaskRunner"},(0,l.kt)("code",null,"CheckupTaskRunner")),"  "),(0,l.kt)("a",{name:"CheckupTaskRunner+hasTaskFilter"}),(0,l.kt)("h3",{id:"checkuptaskrunnerhastaskfilter-\u21d2-boolean"},"checkupTaskRunner.hasTaskFilter \u21d2 ",(0,l.kt)("code",null,"boolean")),(0,l.kt)("p",null,"Check if user provides task filter by using task, category or group"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.kt)("a",{parentName:"p",href:"#CheckupTaskRunner"},(0,l.kt)("code",null,"CheckupTaskRunner")),"  "),(0,l.kt)("a",{name:"CheckupTaskRunner+getAvailableTasks"}),(0,l.kt)("h3",{id:"checkuptaskrunnergetavailabletasks-\u21d2"},"checkupTaskRunner.getAvailableTasks() \u21d2"),(0,l.kt)("p",null,"Get a list of task names that are able to run."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,l.kt)("a",{parentName:"p",href:"#CheckupTaskRunner"},(0,l.kt)("code",null,"CheckupTaskRunner")),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Returns"),": - a list of fully qualified task names.  "))}s.isMDXComponent=!0}}]);