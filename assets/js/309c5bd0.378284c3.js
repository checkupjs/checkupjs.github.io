"use strict";(self.webpackChunkcheckup_website=self.webpackChunkcheckup_website||[]).push([[9573],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,h=d["".concat(u,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(h,c(c({ref:t},s),{},{components:n})):r.createElement(h,c({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=d;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5120:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),c=["components"],a={id:"config",title:"Configuration"},u=void 0,l={unversionedId:"introduction/config",id:"introduction/config",isDocsHomePage:!1,title:"Configuration",description:"Checkup uses a .checkuprc file to configure the behaviour of the tool. The file is located in the root of the project.",source:"@site/docs/introduction/configuration.mdx",sourceDirName:"introduction",slug:"/introduction/config",permalink:"/docs/introduction/config",editUrl:"https://github.com/checkupjs/checkup/edit/master/website/docs/introduction/configuration.mdx",tags:[],version:"current",frontMatter:{id:"config",title:"Configuration"},sidebar:"guidesSidebar",previous:{title:"Node API",permalink:"/docs/introduction/node-api"},next:{title:"Authoring Plugins",permalink:"/docs/guides/plugins"}},s=[{value:"Configuration file",id:"configuration-file",children:[{value:"<code>excludePaths</code>",id:"excludepaths",children:[],level:3},{value:"<code>plugins</code>",id:"plugins",children:[],level:3},{value:"<code>tasks</code>",id:"tasks",children:[],level:3}],level:2}],p={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Checkup uses a ",(0,i.kt)("inlineCode",{parentName:"p"},".checkuprc")," file to configure the behaviour of the tool. The file is located in the root of the project."),(0,i.kt)("h2",{id:"configuration-file"},"Configuration file"),(0,i.kt)("p",null,"You can create a configuration file by running the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"checkup generate config\n")),(0,i.kt)("p",null,"This will generate a .checkuprc file in the current directory, with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title=".checkuprc"',title:'".checkuprc"'},'{\n  "$schema": "https://raw.githubusercontent.com/checkupjs/checkup/master/packages/core/src/schemas/config-schema.json",\n  "excludePaths": [],\n  "plugins": [],\n  "tasks": {}\n}\n')),(0,i.kt)("h3",{id:"excludepaths"},(0,i.kt)("inlineCode",{parentName:"h3"},"excludePaths")),(0,i.kt)("p",null,"You can exclude paths from the analysis by adding them to the ",(0,i.kt)("inlineCode",{parentName:"p"},"excludePaths")," array, which is a comma separated list of paths."),(0,i.kt)("h3",{id:"plugins"},(0,i.kt)("inlineCode",{parentName:"h3"},"plugins")),(0,i.kt)("p",null,"Plugins can be configured by adding them to the ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," array. Each plugin is a string that represents the name of the plugin."),(0,i.kt)("h3",{id:"tasks"},(0,i.kt)("inlineCode",{parentName:"h3"},"tasks")),(0,i.kt)("p",null,"Tasks can be individually configured by adding them to the ",(0,i.kt)("inlineCode",{parentName:"p"},"tasks")," object. The key is the name of the task, and the value is either a string or a tuple:"),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/checkupjs/checkup/master/packages/core/src/schemas/config-schema.json",\n  "excludePaths": [],\n  "plugins": [],\n  "tasks": {\n    "plugin-name/my-task": "off",\n    "plugin-name/my-other-task": [\n      "on",\n      {\n        "some-option": "some-value"\n      }\n    ]\n  }\n}\n')))}d.isMDXComponent=!0}}]);